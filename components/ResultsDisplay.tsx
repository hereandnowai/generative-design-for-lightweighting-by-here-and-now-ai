import React from 'react';
import { DesignResults } from '../types';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import { BRANDING_CONFIG } from '../constants';

interface ResultsDisplayProps {
  results: DesignResults | null; 
  isLoading: boolean;
}

const ResultItem: React.FC<{ label: string; value: string | number | undefined; unit?: string; tooltip?: string }> = ({ label, value, unit, tooltip }) => (
  <div className="py-2">
    <dt className="text-sm font-medium text-gray-500 flex items-center">
      {label}
      {tooltip && (
        <span className="ml-1 group relative">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-4 h-4 text-gray-400 hover:text-gray-600 cursor-help">
            <path strokeLinecap="round" strokeLinejoin="round" d="m11.25 11.25.041-.02a.75.75 0 0 1 1.063.852l-.708 2.836a.75.75 0 0 0 1.063.853l.041-.021M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Zm-9-3.75h.008v.008H12V8.25Z" />
          </svg>
          <span className="absolute left-1/2 -translate-x-1/2 bottom-full mb-2 w-max max-w-xs p-2 text-xs text-white bg-gray-700 rounded opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none z-10">
            {tooltip}
          </span>
        </span>
      )}
    </dt>
    <dd className="mt-1 text-md text-gray-900 sm:mt-0 sm:col-span-2">{value !== undefined && value !== null ? `${value}${unit || ''}` : 'N/A'}</dd>
  </div>
);


const ResultsDisplay: React.FC<ResultsDisplayProps> = ({ results, isLoading }) => {
  const pdfCaptureRef = React.useRef<HTMLDivElement>(null);
  const [isPdfLoading, setIsPdfLoading] = React.useState<boolean>(false);

  const handleDownloadPdf = async () => {
    if (!results || !pdfCaptureRef.current) {
      alert("No results to download or capture area not found.");
      return;
    }
    setIsPdfLoading(true);

    try {
      const canvas = await html2canvas(pdfCaptureRef.current, {
        scale: 2, // Improve image quality
        useCORS: true, // If images are from other domains
        logging: false,
      });
      const imgData = canvas.toDataURL('image/png');
      
      const pdf = new jsPDF({
        orientation: 'portrait',
        unit: 'mm',
        format: 'a4'
      });

      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();
      const margin = 10;
      const contentWidth = pageWidth - 2 * margin;

      // Add Company Logo
      const logoImg = new Image();
      logoImg.src = BRANDING_CONFIG.brand.logo.title;
      logoImg.onload = () => {
        const logoHeight = 15; // mm
        const logoWidth = (logoImg.width * logoHeight) / logoImg.height;
        const logoX = (pageWidth - logoWidth) / 2;
        pdf.addImage(logoImg, 'PNG', logoX, margin, logoWidth, logoHeight);

        // Add Report Title
        pdf.setFontSize(18);
        pdf.setTextColor(BRANDING_CONFIG.brand.colors.secondary); // Use brand secondary color
        pdf.text("Generative Design Optimization Report", pageWidth / 2, margin + logoHeight + 10, { align: 'center' });

        // Add Date
        pdf.setFontSize(10);
        pdf.setTextColor(100); // Gray color
        const currentDate = new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' });
        pdf.text(`Date: ${currentDate}`, pageWidth / 2, margin + logoHeight + 18, { align: 'center' });
        
        // Add captured image of results
        const imgProps = pdf.getImageProperties(imgData);
        const imgHeight = (imgProps.height * contentWidth) / imgProps.width;
        let positionY = margin + logoHeight + 25;

        if (positionY + imgHeight > pageHeight - margin - 10) { // Check if it fits with footer
           console.warn("Content might be too large for one page. Consider splitting or reducing scale.");
        }
        pdf.addImage(imgData, 'PNG', margin, positionY, contentWidth, imgHeight);

        // Add Footer
        const footerText = `Report generated by ${BRANDING_CONFIG.brand.shortName} Generative Design Platform. Visit ${BRANDING_CONFIG.brand.website}`;
        pdf.setFontSize(8);
        pdf.setTextColor(150);
        pdf.text(footerText, pageWidth / 2, pageHeight - margin + 5, { align: 'center' });

        // Generate filename
        const reportBaseName = results.designFile ? results.designFile.replace(/^optimized_/, '').replace(/\.stl$/, '').replace(/_/g, ' ') : 'Optimized Part';
        const pdfFilename = `Generative_Design_Report_${reportBaseName.replace(/\s+/g, '_')}_${new Date().toISOString().slice(0,10)}.pdf`;
        
        pdf.save(pdfFilename);
        setIsPdfLoading(false);
      };
      logoImg.onerror = () => {
        console.error("Failed to load logo for PDF.");
        // Proceed without logo if it fails
        pdf.setFontSize(18);
        pdf.setTextColor(BRANDING_CONFIG.brand.colors.secondary);
        pdf.text("Generative Design Optimization Report", pageWidth / 2, margin + 10, { align: 'center' });
        pdf.setFontSize(10);
        pdf.setTextColor(100);
        const currentDate = new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' });
        pdf.text(`Date: ${currentDate}`, pageWidth / 2, margin + 18, { align: 'center' });
        
        const imgProps = pdf.getImageProperties(imgData);
        const imgHeight = (imgProps.height * contentWidth) / imgProps.width;
        let positionY = margin + 25;
        pdf.addImage(imgData, 'PNG', margin, positionY, contentWidth, imgHeight);

        const footerText = `Report generated by ${BRANDING_CONFIG.brand.shortName} Generative Design Platform. Visit ${BRANDING_CONFIG.brand.website}`;
        pdf.setFontSize(8);
        pdf.setTextColor(150);
        pdf.text(footerText, pageWidth / 2, pageHeight - margin + 5, { align: 'center' });

        const reportBaseName = results.designFile ? results.designFile.replace(/^optimized_/, '').replace(/\.stl$/, '').replace(/_/g, ' ') : 'Optimized Part';
        const pdfFilename = `Generative_Design_Report_${reportBaseName.replace(/\s+/g, '_')}_${new Date().toISOString().slice(0,10)}.pdf`;
        
        pdf.save(pdfFilename);
        setIsPdfLoading(false);
      }

    } catch (error) {
      console.error("Error generating PDF:", error);
      alert("Failed to generate PDF. Please try again.");
      setIsPdfLoading(false);
    }
  };


  if (isLoading) {
    return (
      <div className="bg-white p-6 rounded-lg shadow-lg flex flex-col items-center justify-center min-h-[300px]">
        <svg className="animate-spin h-12 w-12 text-brandPrimary mb-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
          <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        <p className="text-brandSecondary font-semibold">Generating optimized design...</p>
        <p className="text-sm text-gray-500">This may take a moment.</p>
      </div>
    );
  }

  if (!results) {
    return (
      <div className="bg-white p-6 rounded-lg shadow-lg flex flex-col items-center justify-center min-h-[300px]">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-16 h-16 text-gray-300 mb-4">
          <path strokeLinecap="round" strokeLinejoin="round" d="M3.75 3v11.25A2.25 2.25 0 0 0 6 16.5h12A2.25 2.25 0 0 0 20.25 14.25V3m-9.75 0V9M12 9H3.75M12 9V3.75M3.75 9h8.25m9.75-6.375c0-.621-.504-1.125-1.125-1.125H3.375c-.621 0-1.125.504-1.125 1.125v11.25c0 .621.504 1.125 1.125 1.125h17.25c.621 0 1.125-.504 1.125-1.125V2.625Z" />
        </svg>
        <p className="text-lg font-semibold text-gray-500">Results will appear here</p>
        <p className="text-sm text-gray-400">Enter design parameters and click "Generate".</p>
      </div>
    );
  }

  return (
    <div className="bg-white p-6 rounded-lg shadow-lg">
      <h2 className="text-xl font-semibold text-brandSecondary mb-6">2. Generative Design Results</h2>
      
      <div id="pdf-capture-area" ref={pdfCaptureRef} className="bg-white p-4"> {/* Added padding to ensure content isn't flush with edges in capture */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4">
          <div className="bg-green-50 p-4 rounded-md border border-green-200">
              <h3 className="text-lg font-semibold text-green-700">Weight Optimization</h3>
              <ResultItem label="Original Weight" value={results.originalWeight} unit=" g" tooltip="Calculated weight before optimization." />
              <ResultItem label="Optimized Weight" value={results.newWeight} unit=" g" tooltip="Weight after generative design process." />
              <ResultItem label="Weight Reduction" value={results.weightReductionPercentage} unit="%" tooltip="Percentage of weight saved."/>
              <ResultItem label="Material Saved" value={results.materialSaved} unit=" g" tooltip="Absolute amount of material saved."/>
          </div>

          <div className="bg-blue-50 p-4 rounded-md border border-blue-200">
              <h3 className="text-lg font-semibold text-blue-700">Performance & Safety</h3>
              <ResultItem label="Stress Distribution" value={results.stressDistribution} tooltip="Summary of stress analysis." />
              <ResultItem label="Safety Factor Achieved" value={results.safetyFactorAchieved} tooltip="Indicates if the required safety factor is achieved."/>
          </div>
        </div>

        <div className="mt-6 bg-indigo-50 p-4 rounded-md border border-indigo-200">
          <h3 className="text-lg font-semibold text-indigo-700">Manufacturing & Environment</h3>
          <ResultItem label="Manufacturing Feasibility" value={results.manufacturingFeasibility} tooltip="Assessment of how easily the part can be manufactured."/>
          {results.environmentalImpact && (
              <>
                  <ResultItem label="Est. Fuel Savings" value={results.environmentalImpact.fuelSavings} tooltip="Qualitative impact on fuel efficiency."/>
                  <ResultItem label="Est. Carbon Reduction" value={results.environmentalImpact.carbonReduction} tooltip="Qualitative impact on carbon footprint."/>
              </>
          )}
        </div>
        
        {/* Removed Stress Distribution Visualization Placeholder Section */}
      </div>

      {results.designFile && (
        <div className="mt-8 text-center">
          <button 
            onClick={handleDownloadPdf}
            disabled={isPdfLoading}
            className="bg-brandSecondary hover:bg-teal-800 text-brandTextOnSecondary font-bold py-3 px-6 rounded-md focus:outline-none focus:shadow-outline transition duration-150 ease-in-out disabled:opacity-70 disabled:cursor-wait flex items-center justify-center w-full sm:w-auto"
            aria-label="Download generative design report as PDF"
            >
            {isPdfLoading ? (
              <>
                <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Generating PDF...
              </>
            ) : "Download Report (PDF)"}
          </button>
        </div>
      )}
    </div>
  );
};

export default ResultsDisplay;